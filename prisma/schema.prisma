generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique
  email               String               @unique
  password            String
  role                UserRole             @default(USER)
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              UserStatus           @default(ACTIVE)
  travelBuddyRequests TravelBuddyRequest[]
  trips               Trip[]
  userProfile         UserProfile?

  @@map("users")
}

model UserProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  contactNumber String
  age           Int?
  image         String?
  address       String?
  bio           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)
  name          String?
  occupation    String?
  gender        Gender
  user          User     @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

model Trip {
  id                  String               @id @default(uuid())
  userId              String
  destination         String
  description         String
  startDate           DateTime
  endDate             DateTime
  travelType          String
  photos              String[]
  itinerary           Json
  budget              Int
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  travelBuddyRequests TravelBuddyRequest[]
  user                User                 @relation(fields: [userId], references: [id])

  @@map("trips")
}

model TravelBuddyRequest {
  id        String             @id @default(uuid())
  tripId    String
  userId    String
  status    BuddyRequestStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  trip      Trip               @relation(fields: [tripId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@map("travelBuddyRequests")
}

enum BuddyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
